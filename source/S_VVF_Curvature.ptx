<?xml version="1.0"?>
<!-- **********************************************************************-->
<!-- Copyright 2013-2024                                                   -->
<!-- Nicholas Long, Mitchel Keller, Steven Schlicker                       -->
<!--                                                                       -->
<!-- This file is part of Active Calculus Multivariable.                   -->
<!--                                                                       -->
<!-- Permission is granted to copy, distribute and/or modify this document -->
<!-- under the terms of the Creative Commons BY-NC-SA license.  The work   -->
<!-- may be used for free by any party so long as attribution is given to  -->
<!-- the author(s), the work and its derivatives are used in the spirit of -->
<!-- "share and share alike"; no party may sell this work or any of its    -->
<!-- derivatives for profit.  All trademarks are the registered marks of   -->
<!-- their respective owners.                                              -->
<!-- **********************************************************************-->
<section xml:id="S-VVF-Curvature" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Curvature</title>
  <objectives>
      <ul>
        <li>
          <p>
            How can you measure how fast a path is turning (regardless of the parameterization)?
          </p>
        </li>

        <li>
          <p>
            What is the radius of curvature for a path at a given location?
          </p>
        </li>
      </ul>
  </objectives>

  <introduction>
    <p>
      In <xref ref="S-VVF-TNB" /> we defined <m>\vT</m> and <m>\vN</m> to measure the direction of travel and the direction of turning for an oriented curve in space. Both <m>\vT</m> and <m>\vN</m> are unit vectors that are used to capture the <q>direction</q> aspects of motion. 
      In the next couple of sections, we will look at a few different ways to measure the magnitude of various aspects of our motion and turning on a curve in space. 
    </p>
    <p>
      Note here that given a parameterization of a curve in space, the speed will give us an idea about how fast we are moving along the curve, but we don't have a way to measure how much turning is happening at a given location. In this section, we will measure how quickly a curve is turning. This is a different from measuring how fast an object is turning as it moves along a path. We will return to this idea a bit later.
    </p>
    <exploration>
      <introduction>
        <p>
          As Chief Engineer and CEO at <em>Steer Clear</em>, you have done great work in transforming information from your location tracking system (LTS) into information on the position, velocity, and distance traveled by your car. In order to make the <q>self-driving</q> part of the self-driving car company, you will need to compare information from the LTS (which describes how your car is moving) to GPS location data for the network of roads (which describe the paths your car should be taking). Since everyone on the road drives differently, we would like to measure how quickly a stretch of road is turning in different places. This measurement should not depend on the particular driver but should be a property of the path the road takes. Remember that your car cannot look forward in time to see how it will need to turn, but the car can look forward along the road to see how the path changes.
        </p>
      </introduction>
      <task>
        <statement>
          <p>
            <xref ref="PA-curvatureplot1" /> shows a map of a section of road on your testing route for your self-driving car with points labeled <m>P_0</m> and <m>P_1</m> which are 10 meters apart. Draw a vector in the direction of travel at <m>P_0</m> and <m>P_1</m> and use these vectors to describe how the direction of travel is changing on the path from <m>P_0</m> to <m>P_1</m>.
          </p>
          <figure xml:id="PA-curvatureplot1">
            <caption> A plot of the section of road with points <m>P_0</m> and <m>P_1</m> separated by 10 meters</caption>
            <image width="55%" xml:id="img-curvatureplot1">
              <description><p>A 2D curve points <m>P_0</m> and <m>P_1</m> labeled </p></description>
              <sageplot>
                tpoints=[1,1.2]
                offsetx=[0.1,-0.1]
                offsety=[-0.2,-0.2]
                labels=["$P_0$","$P_1$"]
                var('t');
                r1(t)=((t^2/15+2)*cos(t),(1.5-t/12)*sin(t))
                plot1=parametric_plot(r1(t),(t,0.5,4),aspect_ratio=1,color='black',thickness=2,axes=False)
                plot1+=arrow(r1(2),r1(2.01),color="black")
                for i in range(len(tpoints)):
                    position=r1(tpoints[i])
                    withoffset=(position[0]+offsetx[i],position[1]+offsety[i])
                    plot1+=point([position],color='black',size=50)+text(labels[i],withoffset,fontsize=20,color='black')
                plot1
              </sageplot>
            </image>
          </figure>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            <xref ref="PA-curvatureplot2" /> shows a map of a section of road on your testing route for your self-driving car with points labeled <m>Q_0</m> and <m>Q_1</m> which are 10 meters apart. Draw a vector in the direction of travel at <m>Q_0</m> and <m>Q_1</m> and use these vectors to describe how the direction of travel is changing on the path from <m>Q_0</m> to <m>Q_1</m>.
          </p>
          <figure xml:id="PA-curvatureplot2">
            <caption> A plot of the section of road with points <m>Q_0</m> and <m>Q_1</m> separated by 10 meters</caption>
            <image width="55%" xml:id="img-curvatureplot2">
              <description><p>A 2D curve points <m>P_0</m> and <m>P_1</m> labeled </p></description>
              <sageplot>
                tpoints=[3.1,3.4]
                offsetx=[-0.1,-0.2]
                offsety=[0.2,0.1]
                labels=["$Q_0$","$Q_1$"]
                var('t');
                r1(t)=((t^2/15+2)*cos(t),(1.5-t/12)*sin(t))
                plot2=parametric_plot(r1(t),(t,0.5,4),aspect_ratio=1,color='black',thickness=2,axes=False)
                plot2+=arrow(r1(2),r1(2.01),color="black")
                for i in range(len(tpoints)):
                    position=r1(tpoints[i])
                    withoffset=(position[0]+offsetx[i],position[1]+offsety[i])
                    plot2+=point([position],color='black',size=50)+text(labels[i],withoffset,fontsize=20,color='black')
                plot2
              </sageplot>
            </image>
          </figure>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Is the direction of travel changing faster over the path from <m>P_0</m> to <m>P_1</m> or over the path from <m>Q_0</m> to <m>Q_1</m>. Write a few sentences to explain your reasoning and connect to your arguments and plots for the first two tasks.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            If we let <m>P_2</m> be the point on the path that is 5 meters ahead of <m>P_0</m> and <m>Q_2</m> be the point on the path that is 5 meters ahead of <m>Q_0</m>. Would your answer to the previous question change if you compared the path from <m>P_0</m> to <m>P_2</m> to the path from <m>Q_0</m> to <m>Q_2</m>? Explain your reasoning.
          </p>
        </statement>
      </task>
    </exploration>
    <p>
      Our preview activity showed how looking at the change in <m>\vT</m>, the direction of travel, for small steps (in terms of arclength) along our curve will allow us to measure the rate at which a curve is turning. Note that this will be different than measuring how quickly an object that is traveling along the path needs to turn in order to stay on the path. The arguments in the preview activity do not depend on how an object is traveling along the path. 
    </p>
  </introduction>
  <subsection>
    <title>Curvature</title>
    <p>
      We claim that <m>\vr_1(t)</m>, the unit speed parameterization of a curve is unique; If you and I drive the same path and both maintain a speed of exactly 1 meter per second, then for any point on the path, we will both reach that point in the same amount of time. For instance,it will take us both exactly 15 seconds to reach the point that is 15 meters down the path (remember that the parameter value for <m>\vr_1</m> is the same as the distance traveled along the curve.) Conceptually, you can see how using the unit speed parameterization will allow us to measure properties of the curve and avoid questions about how different ways of moving along the path will affect our measurements. 
    </p>
    <p>
      We will measure how quickly a path turns as the rate of change in the direction of travel in terms of the unit speed parameterization. If <m>\vr_1(t)</m> is the <em>unit</em> speed parameterization of our curve <m>C</m> and we look a section of our path from <m>\vr(t_0)</m> to <m>\vr(t_0+\Delta h)</m>, then rate of change of <m>\vT</m> will be given by 
      <me>\left\Vert \frac{\vT(t_0+\Delta h)-\vT(t_0)}{\Delta h}  \right\Vert</me>
      Note here that this rate of change is a scalar (not a vector) and that <m>\Delta h</m> measures how long the section we are looking at is in terms of arclength. 
    </p>
    <figure xml:id="curvatureplot3">
      <caption> A plot of a curve with <m>\vT</m> shown for two points</caption>
      <image width="55%" xml:id="img-curvatureplot3">
        <description><p>A 2D curve with points </p></description>
        <sageplot>
          tpoints=[3.1,3.4]
          offsetx=[0.2,0.35]
          offsety=[0,0]
          labels=["$\\vec{r}_1(t_0)$","$\\vec{r}_1(t_0+\\Delta h)$"]
          vlabels=["$\\vec{T}(t_0)$","$\\vec{T}(t_0+\\Delta h)$"]
          var('t');
          r1(t)=((t^2/15+2)*cos(t),(1.5-t/12)*sin(t))
          v1(t)=diff(r1,t)
          T(t)=v1(t)/norm(v1(t))
          plot3=parametric_plot(r1(t),(t,3,4),aspect_ratio=1,color='black',thickness=2,axes=False)
          for i in range(len(tpoints)):
            position=r1(tpoints[i])
            withoffset=(position[0]+offsetx[i],position[1]+offsety[i])
            voffset=(position[0]+(T(tpoints[i])[0])/1.2-0.15-0.15*i,position[1]+(T(tpoints[i])[1])/1.2)
            vvoffset=(-4+(T(tpoints[i])[0])/2-0.15+0.45*i,(T(tpoints[i])[1])/2)
            plot3+=point([position],color='black',size=50)+text(labels[i],withoffset,fontsize=20,color='black')
            plot3+=arrow(r1(tpoints[i]),r1(tpoints[i])+T(tpoints[i]),color="blue")
            plot3+=arrow((-4,0),(T(tpoints[i])[0]-4,T(tpoints[i])[1]),color="blue")
            plot3+=text(vlabels[i],voffset,color="blue",fontsize=15)
            plot3+=text(vlabels[i],vvoffset,color="blue",fontsize=15)
          plot3+=arrow((T(3.1)[0]-4,T(3.1)[1]),(T(3.4)[0]-4,T(3.4)[1]),color="red")
          dT=T(3.4)-T(3.1)
          plot3+=text("$\\vec{T}(t_0+\\Delta h)-\\vec{T}(t_0)$",((T(3.1)[0]-4+T(3.4)[0]-4)/2,(T(3.1)[1]+T(3.4)[1])/2-0.1),color="red",fontsize=15)
          plot3+=arrow((T(3.1)[0]-4,T(3.1)[1]-0.5),(T(3.1)[0]-4+2.5*dT[0],T(3.1)[1]-0.5+dT[1]*2.5),color="red")
          plot3+=text("$\\frac{\\vec{T}(t_0+\\Delta h)-\\vec{T}(t_0)}{\\Delta h}$",(T(3.1)[0]-4+1.2*dT[0],T(3.1)[1]+dT[1]*1.2-0.65),color="red",fontsize=20)
          plot3
        </sageplot>
      </image>
    </figure>
    <p>
      <xref ref="curvatureplot3" /> shows a geometric representation of our measurement of how quickly our curve turns over the interval from <m>\vr_1(t_0)</m> to <m>\vr_1(t_0+\Delta h)</m>. If we take the limit as <m>\Delta h \rightarrow 0</m>, then we have measure of how quickly a curve is turning at the point <m>P=\vr_1(t_0)</m>, which can be calculated by
      <me>
        \lim_{\Delta h \rightarrow 0} \left\Vert \frac{\vT(t_0+\Delta h)-\vT(t_0)}{\Delta h}  \right\Vert 
        = \left\Vert \frac{d\vT}{ds} \right\Vert
      </me>
      Remember that the parameterization used in every part of the above argument is the unit speed parameterization which is why are able to take the derivative of <m>\vT</m> with respect to the arclength.
    </p>
    <definition>
      <statement>
        <p>
          If <m>C</m> is a smooth space curve and <m>s</m> is the parameter for the unit speed parameterization of <m>C</m>, then the <term>curvature</term><idx><h>curvature</h></idx>, <m>\kappa</m>, of <m>C</m> is
          <me>
            \kappa = \kappa(s) = \left\lvert \frac{d \vT}{ds} \right\rvert.
          </me>
          Remember that the parameter for the unit speed parameterization <m>C</m> will measure that arclength traveled so far along the curve. Note that curvature is denoted with<m>\kappa</m>, the Greek lowercase letter <q>kappa</q>.
        </p> 
      </statement>
    </definition>

    <p>
      
    </p>

    <activity xml:id="A_9_8_5">
      <introduction>
        <p>
          In this activity we will use our previous work in finding unit speed parameterizations of lines and circles to make sense of the definition of curvature.
        </p>
      </introduction>
      <task>
        <statement>
          <p>
            Recall that in <xref ref="linearclength"/> we found that the unit speed parameterization of a line through the point <m>(x_0,y_0)</m> with direction vector <m>\langle a,b\rangle</m> can be given by 
          <me>
            \vr(s)=\langle x(s),y(s) \rangle  = \langle x_0+\frac{a}{\sqrt{a^2+b^2}}s , y_0+\frac{b}{\sqrt{a^2+b^2}}s \rangle
          </me>
          Compute the speed of this parameterization to verify that this has unit speed. This will also show that <m>\vr'(s)=\vv(s)=\vT(s)</m> (which is not true in general.)
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Calculate <m>\vT(s)</m>, <m>\frac{d\vT}{ds}</m>, and <m>\left\Vert \frac{d\vT}{ds} \right\Vert</m> for the unit speed parameterization of a line.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Write a few sentences to explain why your result for the calculation of <m>\kappa=\left\Vert \frac{d\vT}{ds} \right\Vert</m> of a line makes sense.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Recall that in <xref ref="A_9_8_1"/> we found that the unit speed parameterization of circle in 2-space of radius <m>a</m> centered at
            the origin can be given by 
          <me>
            \vr(s) = \left\langle a \cos\left(\frac{s}{a}\right), a \sin\left(\frac{s}{a}\right)\right\rangle
          </me>
          Compute the speed of this parameterization to verify that this has unit speed. This will also show that <m>\vr'(s)=\vv(s)=\vT(s)</m> (which is not true in general.)
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Calculate <m>\vT(s)</m>, <m>\frac{d\vT}{ds}</m>, and <m>\left\Vert \frac{d\vT}{ds} \right\Vert</m> for the unit speed parameterization of a circle centered at the origin.
          </p>
        </statement>
        <solution>
          <p>
            We have
            <me>
              \vT(s) = \left\langle -\sin\left(\frac{s}{a}\right), \cos\left(\frac{s}{a}\right) \right\rangle
            </me>.
          </p>
          <p>
            So the curvature of a circle of radius <m>a</m> is
            <md>
              <mrow>\kappa \amp = \left\lvert \frac{d \vT}{ds} \right\rvert</mrow>
              <mrow>\amp = \left\lvert \left\langle -\frac{1}{a}\cos\left(\frac{s}{a}\right), -\frac{1}{a}\sin\left(\frac{s}{a}\right) \right\rangle \right\rvert</mrow>
              <mrow>\amp = \frac{1}{a}</mrow>
            </md>.
          </p>
          <p>
            So, as expected, larger circles have smaller curvature.
          </p>
        </solution>
      </task>
      <task>
        <statement>
          <p>
            Write a few sentences to explain why your result for the calculation of <m>\kappa=\left\Vert \frac{d\vT}{ds} \right\Vert</m> of circle will be constant. You should also address why circles with larger radii will have have smaller curvature.
          </p>
        </statement>
      </task>
    </activity>
    <p>
      The definition of curvature relies on our ability to parameterize curves with unit speed. Since finding unit speed parametrization is very difficult to compute directly, we would like to be able to calculate the curvature of a curve in terms of <em>any</em> parametrization <m>\vr(t)</m>.
    </p>
    <theorem xml:id="thm-calc-curvature">
      <statement>
        <p>
          If <m>\vr</m> is a parameterization of a curve <m>C</m>, and if <m>\vr'(t)</m> is not zero and if <m>\vr''(t)</m> exists, then the curvature <m>\kappa</m> of <m>C</m> can be calculated as
          <me>\kappa = \kappa(t) = \frac{\left\Vert \vT'(t) \right\Vert}{ \left\lvert \vr'(t) \right\rvert}</me>
        </p>
        <p>
          Further, we can efficiently calculate curvature in terms of the velocity and acceleration functions by
          <men xml:id="ec-curv">\kappa = \frac{\Vert \vr'(t) \times \vr''(t) \Vert}{\Vert \vr'(t) \Vert^3}= \frac{\Vert \vv(t) \times \va(t) \Vert}{\Vert \vv(t) \Vert^3}</men>
        </p>
      </statement>
      <proof>
        <p>
          We will give the outline of a proof of the first result here in order to emphasize that this result comes from a chain rule argument related to <xref ref="coordchangetounitspeed" >the change of parameters going to a unit speed parameterization</xref>. 
        </p>
        <p>
          Let <m>\vr(t)</m> be some parameterization of our curve <m>C</m>. Remember that in order to calculate the curvature, <m>\vT</m> will need to have an input corresponding to the parameter of the unit speed parameterization, which means the input of the <m>\vT</m> will need to measure the arclength of <m>C</m> to the point we at. We will use a function <m>s(t)</m> with input being the parameter of <m>\vr(t)</m> and the output of <m>s(t)</m> will be the arclength on <m>C</m> to the point <m>\vr(t)</m>. Note that <m>s(t)</m> will be computed using <xref ref="Length-of-a-curve" /> and that the derivative <m>\frac{ds}{dt}</m> will be <m>\Vert\vr'(t)\Vert</m>. 
        </p>
        <p>
          We can write <m>\vT</m> as a function of the parameter <m>t</m> by the composition <m>\vT(t)=\vT(s(t))</m>. Taking the derivative of this composition with respect to <m>t</m> will utilize a chain rule argument.
          <me>
            \frac{d\vT}{dt}=\frac{d}{dt}\left(\vT(s(t))\right)=\frac{d\vT}{ds} \frac{ds}{dt}
          </me>
          Note here that <m>\frac{d\vT}{dt}=\vT'</m> is the same derivative of <m>\vT</m> we have seen a few times. 
        </p>
        <p>
          Because <m>\frac{ds}{dt}</m> is a scalar valued function we can divide both sides of the equation by it to get
          <me>
           \frac{\vT'}{\frac{ds}{dt}}=\frac{d\vT}{ds}
          </me>
          Using our idea above from <xref ref="Length-of-a-curve" />, we can substitute <m>\frac{ds}{dt}= \Vert\vr'(t)\Vert</m> and take the magnitude of each side to get the following
          <men xml:id="eqn-curv">\left\Vert \frac{\vT'}{\Vert\vr'(t)\Vert} \right\Vert = \left\Vert\frac{d\vT}{ds} \right\Vert =\kappa</men>
        </p>
        <p>
          If this chain rule argument seems a little technical to you, there is a nice conceptual interpretation of the equation above. Specifically, if we want to convert a measurement like curvature or the derivative of <m>\vT</m> between the unit speed parameterization and any other parameterization, we literally need to adjust by the speed. <xref ref="eqn-curv"/> shows that the adjustment between the derivative of <m>\vT</m> with respect to the unit speed parameter and another parameter is to divide by the variable speed. 
        </p>
        <p>
          We omit the proof of <xref ref="ec-curv"/> because the argument involves a lot of technical algebraic ideas that do not offer a lot of insight into what is measured by curvature. <xref ref="Ez_9_8_5" /> will guide you through this calculation if you are interested in these ideas.
        </p>
      </proof>
    </theorem>
    <p>
      Before we do our example and activity that calculate curvature for a few other examples, we will take a moment to use <xref ref="ec-curv"/> to make sense of when curvature will not be defined or make sense. From algebraic perspective, the curvature will not be defined when the speed is zero. This should make sense by the fact that if you are not moving along the curve (speed is zero), then it does not make sense to measure how quickly the curve is turning. In <xref ref="S-VVF-Spliting-Acceleration" />, we will make sense of why <m>\Vert \vv(t) \times \va(t) \Vert</m> being zero means that there will be zero curvature (which is very different than the curvature being undefined.)
    </p>
    <example>
      <p>
        In this example, we will calculate the curvature of the parabola given by <m>y=x^2</m> for <m>-2 \lt x \lt 2</m>. We will parameterize this curve in three dimensions so that we can use <xref ref="ec-curv" /> (cross product is defined in 3D only). Let <m>\vr(t)=\langle t,t^2,0\rangle</m> with <m>t\in[-2,2]</m>. 
      </p>
      <figure xml:id="paracurv1">
        <caption> A plot of <m>y=x^2</m> with points <m>(0,0)</m> and <m>(-\frac{3}{2},\frac{9}{4})</m></caption>
        <image width="55%" xml:id="img-paracurv1">
          <description><p>A 2D curve with points </p></description>
          <sageplot>
            var('t,x')
            plot4=plot(x^2, (x,-2,2),aspect_ratio=1,gridlines=True,color="black",thickness=2)
            plot4+=point((0,0),size=30,color="black",xmin=-2,xmax=2,ymin=-0.5,ymax=4)
            plot4+=point((-1.5,9/4),size=30,color="black",xmin=-2,xmax=2,ymin=-0.5,ymax=4)
            plot4
          </sageplot>
        </image>
      </figure>
      <p>  
        Using this parameterization, we get the following set of results:
        <md>
          <mrow>\vr'(t)=\vv(t) \amp=\langle1,2t,0\rangle </mrow>
          <mrow>\vr''(t)=\va(t) \amp=\langle0,2,0\rangle </mrow>
          <mrow>\vv(t)\times\va(t) \amp=\langle0,0,2\rangle </mrow>
          <mrow>\Vert\vv(t)\times\va(t)\Vert \amp=2 </mrow>
          <mrow>\Vert\vv(t)\Vert \amp=\sqrt{1=4t^2} </mrow>
        </md>
        Using <xref ref="ec-curv" />, we get the curvature to be
        <me>
          \kappa(t) = \frac{\Vert \vv(t) \times \va(t) \Vert}{\Vert \vv(t) \Vert^3} = \frac{2}{(1+4t^2)^{3/2}}
        </me>
      </p>
      <p>
        Comparing the points <m>(0,0)</m> and <m>(-\frac{3}{2},\frac{9}{4})</m> on <xref ref="paracurv1" />, you can see that the parabola will have a larger curvature at <m>(0,0)</m> because the path is bending much more at <m>(0,0)</m> than at <m>(-\frac{3}{2},\frac{9}{4})</m>. Using our result above, we can see that the curvature at <m>(0,0)\Rightarrow t=0</m> is <m>\kappa(0)=2</m> and the curvature at <m>(-\frac{3}{2},\frac{9}{4})\Rightarrow t=-\frac{3}{2}</m> is <m>\kappa(\frac{3}{2})=\frac{2}{(5)^{3/2}}\approx0.1789</m>. This calculation of the curvature will match up with our geometric meaning.
      </p>
      <p>
        We can also think of the curvature as a function of the parameter we used (in our case <m>t=x</m>.) A plot of <m>\kappa(t) = \frac{2}{(1+4t^2)^{3/2}}</m> as a function of <m>x</m> is shown in <xref ref="curvparabola"/>. You can see that the curvature is highest near the vertex of the parabola and the curvature gets closer to zero as you look farther up the parabola. This should make sense because the parabola is <q>flatter</q> away from the origin.
      </p>
      <figure xml:id="curvparabola">
        <caption> A plot of the curvature of <m>y=x^2</m> as a function of <m>x</m></caption>
        <image width="55%" xml:id="img-curvparabola">
          <description><p>A 2D curve with points </p></description>
          <sageplot>
            var('t,x')
            plot5=plot(2/(1+4*x^2)^(3/2), (x,-2,2),aspect_ratio=1,gridlines=True,color="black",thickness=2)
            plot5
          </sageplot>
        </image>
      </figure>
      <p>
        Suppose you were driving along the path given by <m>y=x^2</m> at unit speed and your steering wheel locked up and prevented you from changing how you were turning at the instant <m>t=0</m>. Because the steering wheel is held fixed, you will no longer stay on the path given by <m>y=x^2</m> but instead will drive in a circle. What do you think the radius of the circle will be?
      </p>
      <p>
        It turns out that the radius of this circle will be <m>\frac{1}{\kappa(0)}=\frac{1}{2}</m>! This shouldn't be too surprising because in <xref ref="A_9_8_5"/>, we saw that the curvature of a circle of radius <m>R</m> is <m>\frac{1}{R}</m>. In general, the <term>radius of curvature</term> is <m>\frac{1}{\kappa}</m> and the circle that is tangent to the curve and has radius <m>\frac{1}{\kappa}</m> is called the <term>osculating circle</term>. The osculating circle can be described as the circle that best approximates the curve at the tangent point since the osculating circle goes through the tangent point and has the same curvature. 
      </p>
      <p>  
        In <xref ref="paracurv2" />, you can see a plot of the path with the osculating circle drawn at a particular point. You can use the slider to change the parameter value at which the osculating circle is drawn. You should notice how the radius of the circle becomes much larger as you move farther away from the vertex in either direction. Remember that curvature and the radius of curvature have an reciprical relationship; large curvature means small radius and small curvature means a large radius. 
      </p>
      <figure xml:id="paracurv2">
        <caption>A plot of <m>y=x^2</m> with the osculating circle drawn tangent to the curve</caption>
        <interactive label="interactive-paracurv2" platform="sage" width="100%" aspect="1:1">
          <slate surface="sage">
            var('s,t,x')
            @interact
            def paracurv(a=slider(-2,2,1/10,default=0,display_value=False,label="Parameter Value")):
              plot6=plot(x^2, (x,-2,2),aspect_ratio=1,gridlines=True,color="black",thickness=2)
              plot6+=point((a,a^2),size=30,color="black",xmin=-2,xmax=2,ymin=-0.5,ymax=4)
              k(s)=2/(1+4*s^2)^(3/2)
              plot6+=parametric_plot((cos(t)/k(a)-2*a/k(a)/(1+4*a^2)^(1/2)+a,sin(t)/k(a)+1/(1+4*a^2)^(1/2)/k(a)+a^2),(t,0,2*pi),color="blue",thickness=2,zorder=3)
              show(plot6)
          </slate>
        </interactive>
      </figure>
    </example>
    <activity xml:id="A_9_8_6">
      <introduction>
        <p>
          In this activity, we will calculate the curvature for an ellipse and a helix, then make sense of these results in terms of their graphs. 
        </p>
      </introduction>
      <task>
        <statement>
          <p>
            The ellipse <m>\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1</m> has parameterization
              <me>
                \vr(t) = \langle a\cos(t), b\sin(t) \rangle.
              </me>
              Find the curvature of the ellipse using this parameterization.
          </p>
        </statement>
        <solution>
          <p>
            We have
              <me>
                \vT(t) = \left\langle -\frac{a\sin(t)}{\sqrt{a^2\sin^2(t) + b^2\cos^2(t)}}, \frac{b\cos(t)}{\sqrt{a^2\sin^2(t) + b^2\cos^2(t)}} \right\rangle
              </me>
              and
              <me>
                \vT'(t) = \left\langle -\frac{ab^2\cos(t)}{\left(a^2\sin^2(t) + b^2\cos^2(t)\right)^{3/2}}, -\frac{a^2b\sin(t)}{\left(a^2\sin^2(t) + b^2\cos^2(t)\right)^{3/2}} \right\rangle
              </me>.
              So the curvature of the ellipse is given by
              <md>
                <mrow>\kappa(t) \amp = \frac{1}{\left(a^2\sin^2(t) + b^2\cos^2(t)\right)^2} \sqrt{(ab^2\cos(t))^2 +(a^2b\sin(t))^2}</mrow>
                <mrow>\amp = \frac{ab}{\left(a^2\sin^2(t) + b^2\cos^2(t)\right)^2} \sqrt{b^2\cos^(t) + a^2\sin^2(t)}</mrow>
                <mrow>\amp = \frac{ab}{\left(a^2\sin^2(t) + b^2\cos^2(t)\right)^{3/2}}</mrow>
              </md>.
          </p>
        </solution>
      </task>
      <task>
        <statement>
          <p>
            Plot the ellipse given by <m>\frac{x^2}{4} + \frac{y^2}{1} = 1</m>. Use your result from the previous task (with <m>a=2</m> and <m>b=1</m>) to compare the curvature at the extreme points on this ellipse. Write a few sentences that describes which points on the ellipse with have the largest curvature (in terms of both your plot and your calculation). Additionally, describe which points on the ellipse with have the smallest curvature (in terms of both your plot and your calculation).
          </p>
        </statement>
        <solution>
          <p>
            If we assume that <m>0 \lt  b \lt  a</m>,
              then we should expect that ellipse to have the largest curvature at the points
              <m>(\pm a, 0)</m> and the smallest at the points <m>(0, \pm b)</m>
              (when <m>t = \frac{\pi}{2} + \pi k</m> for some integer <m>k</m>).
              The denominator of our curvature function can be written as
              <me>
                a^2(1-\cos^2(t)) + b^2 \cos^2(t) = a^2 - (a^2-b^2)\cos^2(t)
              </me>.
              The curvature of the ellipse is largest when this denominator is smallest,
              or when <m>t = 0</m> or <m>t=\pi</m>.
              These <m>t</m> values correspond to the points <m>(\pm a, 0)</m>.
              Similarly, the curvature of the ellipse is smallest when the denominator is largest,
              or when <m>t = \frac{\pi}{2}</m> and <m>t = \frac{3\pi}{2}</m>.
              These <m>t</m> values correspond to the points <m>(0, \pm b)</m> as expected.
          </p>
        </solution>
      </task>
      <task>
        <statement>
          <p>
            The standard helix has parameterization <m>\vr(t) = \cos(t) \vi + \sin(t) \vj + t \vk</m>.  Find the curvature of the helix using this parameterization.
          </p>
        </statement>
        <solution>
          <p>
            Here we have
              <me>
                \vr'(t) = (-\sin(t)) \vi + \cos(t) \vj + \vk
              </me>
              and
              <me>
                \vT(t) = \frac{1}{\sqrt{2}}\left( (-\sin(t)) \vi + \cos(t) \vj + \vk \right)
              </me>.
              Then
              <me>
                \vT'(t) = \frac{1}{\sqrt{2}}\left( (-\cos(t)) \vi - \sin(t) \vj \right)
              </me>
              and so
              <me>
                \kappa(t) = \frac{1}{2}
              </me>
          </p>
        </solution>
      </task>
      <task>
        <statement>
          <p>
            Write a few sentences to describe why the curvature of the helix given above is constant. You may want to include a plot of the curve. 
          </p>
        </statement>
      </task>
    </activity>
    <activity>
      <introduction>
        <p>
          In this activity we will look at the measurement of curvature and determine if curvature is a property of the driver or a property of the road. This is a continuation of <xref ref="driver_road_act" />. As a reminder, a measurement is a property of the driver if the value(s) of that measurement <alert>can</alert> be different for different drivers (when measured at the same location on the racetrack). A measurement is a property of the road when different drivers <alert>must</alert> have the same value(s) (when measured at the same location on the racetrack). The explanations for the next tasks may be difficult for you to write but will be very helpful in ensuring you understand the vector calculus concepts of this chapter.
        </p>
      </introduction>
      <task>
        <statement>
          <p>
           Is curvature a property of the driver or the road? Write a few sentences about your reasoning and be sure to address why every driver may or may not have the same measurement at the same location on the track. 
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            What is the curvature on a straightaway (the race track is a line segment)? What would the radius of curvature be for a straightaway? Write a couple of sentences to justify your answers. 
            
          </p>
        </statement>
      </task>
    </activity>
  </subsection>
  <subsection>
    <title>Summary</title>
    <ul>
      <li>
        <p>
          We define the curvature <m>\kappa</m> of a curve in 2- or 3-space to be the rate of change of the magnitude of the unit tangent vector with respect to arc length, or
          <me>
            \kappa = \left\Vert \frac{d\vT}{ds} \right\Vert
          </me>
          Curvature can be efficiently calculated by the following formula for curves in space:
          <me>
            \kappa = \frac{\Vert \vr'(t) \times \vr''(t) \Vert}{\Vert \vr'(t) \Vert^3}= \frac{\Vert \vv(t) \times \va(t) \Vert}{\Vert \vv(t) \Vert^3}
          </me>
          
        </p>
      </li>
    </ul>
    
    </subsection>

    <xi:include href="exercises/ez-S_VVF_Curvature.ptx" />
    
</section>
