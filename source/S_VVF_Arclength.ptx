<?xml version="1.0"?>
<!-- **********************************************************************-->
<!-- Copyright 2013-2018                                                   -->
<!-- Steven Schlicker                                                      -->
<!--                                                                       -->
<!-- This file is part of Active Calculus Multivariable.                   -->
<!--                                                                       -->
<!-- Permission is granted to copy, distribute and/or modify this document -->
<!-- under the terms of the Creative Commons BY-NC-SA license.  The work   -->
<!-- may be used for free by any party so long as attribution is given to  -->
<!-- the author(s), the work and its derivatives are used in the spirit of -->
<!-- "share and share alike"; no party may sell this work or any of its    -->
<!-- derivatives for profit.  All trademarks are the registered marks of   -->
<!-- their respective owners.                                              -->
<!-- **********************************************************************-->
<section xml:id="S-VVF-ArcLength" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Arc Length</title>

<objectives>
  <ul>
    <li>
      <p>
        How can a definite integral be used to measure the length of a curve in 2- or 3-space?
      </p>
    </li>
    <li>
      <p>
        Why is arc length useful as a parameter?
      </p>
    </li>
  </ul>
</objectives>
<introduction>
<p>
  In the previous sections we have introduced the notation and graphs for vector valued functions, as well as how the calculus operations of limits, derivatives, and integrals will apply to these functions. In this section we will start our work on utilizing these calculus elements alongside our vector tools (like magnitude, direction, or projections) to measure important properties and find ways to efficiently calculate how these properties change along our curve. The first property we will investigate comes up very naturally when looking at curves in space: <q>What is the length of a given curve in space?</q> Remember that <xref ref="Distance-formula" >the distance between two points in space</xref> is given by 
  <me>
    \vert{PQ}\vert = \sqrt{(x_1-x_0)^2 + (y_1-y_0)^2 + (z_1-z_0)^2}
  </me>
  The length of a curve is different than the displacement (change in position) as we will see in the Preview Activity.
</p>
<exploration xml:id="PA-arclength" >
  <introduction>
    <p>
      In <xref ref="PA_9_6" /> and <xref ref="PA_9_7" /> we saw how the location tracking system's (LTS)output is related to a vector valued function that corresponds to how our car is being driven. In order to attract investors and drive shareholder value in <em>Steer Clear</em>, you decide to use the location tracking system's output to build a customized navigation and telemetry tool for a self driving car. The first element you will need to build is a way to use the LTS output to calculate how far the car has driven in a given time. 
    </p>
  </introduction> 
  <task xml:id="PA-arclength1">
    <statement>
      <p>
        In your testing center, you drive your car up a parking ramp and note that the LTS recorded the car had coordinates of <m>\langle 10,-5,0\rangle</m> at <m>t=0</m> and <m>\langle -8,10,12\rangle</m> when <m>t=30</m>. What is the distance between initial (<m>t=0</m>) and final (<m>t=30</m>)positions of the car?
      </p>
    </statement>
  </task> 
  <task>
    <statement>
      <p>
        Do you think the distance the car actually traveled is greater than, less than, or the same as your answer to <xref ref="PA-arclength1" />? Write a couple of sentences to explain your reasoning.
      </p>
    </statement>
  </task>
  <task xml:id="PA-arclength3">
    <statement>
      <p>
        In order to get more information for your telemetry system, you decide to pull the location data from your drive up the parking ramp every 10 seconds. The LTS gives the following data
        <ul>
          <li><m>\langle 10,-5,0\rangle</m> at <m>t=0</m></li>
          <li><m>\langle 6,0,6 \rangle</m> when <m>t=10</m></li>
          <li><m>\langle -10,2,10\rangle</m> when <m>t=20</m></li>
          <li><m>\langle -8,10,12\rangle</m> when <m>t=30</m></li>
        </ul>
        Calculate the distance between successive times and estimate how far your car went in on the drive up the parking ramp. 
      </p>
    </statement>
  </task>
  <task>
    <statement>
      <p>
        Do you think your estimate from <xref ref="PA-arclength3" /> is greater than, less than, or equal to the actual distance traveled? Write a couple of sentences to explain your reasoning. 
      </p>
    </statement>
  </task>
  <task>
    <statement>
      <p>
        You look into the documentation on your location tracking system and see that you can specify how often to output the location data. You decide that getting the location every half a second seems like a good idea. How many data points will that correspond to for your drive up the parking ramp? Write a few sentences to describe what steps you would take with this new location data to calculate a better estimate on the distance traveled by your car.
      </p>
    </statement>
  </task>
</exploration>
<p>
  The last task is an example of a vital skill mathematics, scientific, and engineering fields called algorithmic thinking. Algorithmic thinking involves breaking larger problems into different tasks where a precise set of rules or operations can be stated for each task. We have referred to our classic calculus approach in a few scenarios (and will again this section) and we will take a moment here to mention how the classic calculus approach has the structure of this algorithmic thinking. Specifically, the tasks for our classic calculus approach can be summarized as as 1) approximate, 2) quantify how approximation changes with scale or refinement, 3) apply limit to describe how approximation converges to the measurement of interest. The details of how each of these tasks is done will change depending on the measurement, which is why so much time will be spent talking about the details of tasks 1 and 2 when introducing new concepts. 
</p>
</introduction>
<subsection>
  <title>Arc Length</title>
  <p>
    The central question we want to answer in this section is <q>Given, <m>C</m>, a curve from <m>P</m> to <m>Q</m>, what the length of <m>C</m>?</q>
  </p>
  <figure xml:id="arclength1">
    <caption>A curve <m>C</m> oriented from the point <m>P</m> to the point <m>Q</m> </caption>
    <image width="80%" label="line-arclength1"> <!--source="/line_int_defn3"-->
      <description>An oriented curve from a point <m>P</m> to a point <m>Q</m></description>
      <sageplot >
        tpoints=[4,0.5]
        offsetx=[0.1,0.2]
        offsety=[-0.2,-0.2]
        labels=["$P$","$Q$"]
        var('t');
        r1(t)=((t^2/15+2)*cos(t),(1.5-t/12)*sin(t))
        plot1=parametric_plot(r1(t),(t,0.5,4),aspect_ratio=1,color='black',thickness=2,axes=False)
        for i in range(len(tpoints)):
          position=r1(tpoints[i])
          withoffset=(position[0]+offsetx[i],position[1]+offsety[i])
          plot1+=point([position],color='black',size=50)+text(labels[i],withoffset,fontsize=20,color='black')
        plot1
      </sageplot>
    </image>
  </figure>
  <p>
    As suggested by our work in the Preview Activity and the classic calculus approach, we will approximate the length of the curve <m>C</m> by computing the length of a collection of line segments between points on <m>C</m>. In particular, we will call these intermediate points <m>\vr_0,\vr_1,...\vr_n</m>. Remember that we are specifying location using vectors to be graphed in standard position. Using vectors to specify position means that the corresponding line segments between successive <m>vr_i</m> positions can be represented by the vector difference <m>\Delta\vr_i = \vr_{i}-\vr_{i-1}</m>.
  </p>
  <figure xml:id="arclength2">
    <caption>A curve <m>C</m> oriented from the point <m>P</m> to the point <m>Q</m> split into <m>n</m> parts with endpoints <m>\vr_0,\vr_1,...\vr_n</m></caption>
    <image width="80%" label="line-arclength2"> <!--source="/line_int_defn3"-->
      <description>An oriented curve from a point <m>P</m> to a point <m>Q</m></description>
      <sageplot >
        tpoints=[4,3.5,3,2.5,1.5,1,0.5]
        offsetx=[0.1,-0.2,-0.25,0.2,0,0,0.2]
        offsety=[-0.2,-0.1,0.1,0.2,0.3,0.3,-0.2]
        labels=["$P=\\vec{r}_0$","$\\vec{r}_1$","$\\vec{r}_2$","","$\\vec{r}_{n-2}$","$\\vec{r}_{n-1}$","$Q=\\vec{r}_{n}$"]
        var('t');
        r1(t)=((t^2/15+2)*cos(t),(1.5-t/12)*sin(t))
        plot2=parametric_plot(r1(t),(t,0.5,4),aspect_ratio=1,color='black',thickness=2,axes=False)
        for i in range(len(tpoints)):
          position=r1(tpoints[i])
          withoffset=(position[0]+offsetx[i],position[1]+offsety[i])
          if(i!=len(tpoints)-1 and i!=3):
            plot2+=arrow(r1(tpoints[i]),r1(tpoints[i+1]),color='blue',zorder=5)
          if(i==3):
            plot2+=arrow(r1(tpoints[i]),r1(tpoints[i+1]),color='red')
          plot2+=point([position],color='black',size=50)+text(labels[i],withoffset,fontsize=20,color='black')
          plot2+=text("$\\Delta \\vec{r}_i=\\vec{r}_{i}-\\vec{r}_{i-1}$",(-0.8,0.75),color='red',fontsize=20)
        plot2
      </sageplot>
    </image>
  </figure>
  <p>
    Notice that the description above does not involve a parameterization of <m>C</m> or a description for how you are traveling along <m>C</m>. In general, it is easiest to generate the positions <m>\vr_i</m> by evaluating a parameterization at a different <m>t</m>-values. In particular, we will use <m>\vr(t)=\langle x(t),y(t),z(t)</m>, a parameterization of <m>C</m> to specify the points between <m>P</m> and <m>Q</m>. Specifically, if <m>\vr(t)</m> is a parameterization of <m>C</m> with <m>P=\vr(a)</m> and <m>Q=\vr(b)</m>, then we divide <m>C</m> into <m>n</m> parts given by <m>\vr_i=\vr(t_i)</m> where <m>t_i=a+ i \Delta t</m> with <m>\Delta t= \frac{b-a}{n}</m>. This divides <m>C</m> into parts that correspond to equal steps in the parameter <m>t</m> which will not correspond to parts with equal length. 
  </p>
  <p>
    Our approximation of the length of <m>C</m> will be the sum of the lengths of the vectors <m>\Delta\vr_i = \vr(t_{i})-\vr(t_{i-1})</m>. The length or magnitude of <m>\Delta \vr_i</m> will be given by the distance formula
    <me>
      \sqrt{(x(t_{i}) - x(t_{i-1}))^2 + (y(t_{i}) - y(t_{i-1}))^2 + (z(t_{i}) - z(t_{i-1}))^2}
    </me>
    To make our notation a little more compact, we will write <m>x(t_{i}) - x(t_{i-1})</m> as <m>\Delta x_i</m>, <m>y(t_{i}) - y(t_{i-1})</m> as <m>\Delta y_i</m>, and <m>z(t_{i}) - z(t_{i-1})</m> as <m>\Delta z_i</m>.
    Our approximation of the length of the curve will be calculated by the sum of these lengths which gives
    <md>
      <mrow> L \approx\amp \sum_{i=1}^{n} \Vert\Delta\vr_i\Vert</mrow>
      <mrow>   \approx\amp \sum_{i=1}^{n} \sqrt{(\Delta x_i)^2 + (\Delta y_i)^2 + (\Delta z_i)^2} </mrow>
    </md>
  </p>
  <p>
    Since this approximation will approach the actual length as we use smaller and smaller steps, we define the arclength as follows:
  </p>
  <definition xml:id="def-arclength">
    <statement>
      <p>
        The arclength of <m>C</m>, a curve in space is given by 
        <me>
          \lim_{n \rightarrow \infty} \sum_{i=1}{n} \sqrt{(\Delta x_i)^2 + (\Delta y_i)^2 + (\Delta z_i)^2}
        </me>
        
      </p>
    </statement>
  </definition>
  <p>
    You can use the slider on the interact to change the number of segments to be used in the approximation of the arclength of <m>C</m>. Notice that as the number of segments increases, the difference between the actual length of the curve and the line segments gets smaller. You can also see how the sum of the lengths of the blue segments will approach the true length of the curve (<m>\approx 6.3286</m>).
  </p>
  <figure xml:id="arclengthinteract">
    <caption>A plot of curve in space</caption>
    <interactive title="interactive-arclength1" platform="sage" width="125%" aspect="1:1">
      <slate surface="sage">
        @interact
        def arclengthdemo(n=slider(1,25,1,default=1,label="Number of Segments")):
            tpoints=[4-3.5*i/n for i in range(n+1)]
            r1(t)=((t^2/15+2)*cos(t),(1.5-t/12)*sin(t))
            plot3=parametric_plot(r1(t),(t,0.5,4),aspect_ratio=1,color='black',thickness=2,axes=False)
            plot3+=text("$P$",r1(4.1),color="black",fontsize=20)
            plot3+=text("$Q$",r1(0.4),color="black",fontsize=20)
            dist=0
            for i in range(len(tpoints)):
              position=r1(tpoints[i])
              plot3+=point([position],color='black',size=50)
              if(i!=0):
                plot3+=line([position,oldposition],color="blue")
                dist+=norm(position-oldposition)
              oldposition=position
            plot3+=text("The approximate arc length is "+str(dist.n(digits=5)),(0.5,-0.5),color="black",fontsize=10)    
            show(plot3)
      </slate>
    </interactive>
  </figure>
  <p>
    Since we will want to shrink the step size <m>\Delta t</m> to get better approximations we will rewrite our approximation to allow us to see how our approximation will change as we look at smaller scales (smaller <m>\Delta t</m>).
    <md>
      <mrow> L \approx\amp \sum_{i=1}^{n} \sqrt{(\Delta x_i)^2 + (\Delta y_i)^2 + (\Delta z_i)^2} \frac{\Delta t}{\Delta t}</mrow>
      <mrow>   \approx\amp \sum_{i=1}^{n} \sqrt{(\frac{\Delta x_i}{\Delta t})^2 + (\frac{\Delta y_i}{\Delta t})^2 + (\frac{\Delta z_i}{\Delta t})^2} \ \Delta t</mrow>
    </md>
    This give use the second task in our classic calculus approach (quantify how the approximation changes over a refinement) and this formats our approximation as a Riemann sum. In particular, our approximation is a Riemann sum of the function <m>\sqrt{(\frac{\Delta x_i}{\Delta t})^2 + (\frac{\Delta y_i}{\Delta t})^2 + (\frac{\Delta z_i}{\Delta t})^2}</m> which will simplify greatly when we look at this function as <m>\Delta t</m> goes to 0. Because
    <md>
      <mrow> x'(t) \amp= \lim_{\Delta t \to 0} \frac{x(t_i) - x(t_{i-1})}{\Delta t},</mrow> 
      <mrow> y'(t) \amp= \lim_{\Delta t \to 0} \frac{y(t_i) - y(t_{i-1})}{\Delta t}, \ \text{ and }  </mrow>
      <mrow> z'(t) \amp= \lim_{\Delta t \to 0} \frac{z(t_i) - z(t_{i-1})}{\Delta t}, </mrow> 
    </md>
    the function we are evaluating in our Riemann sum becomes 
    <me> \sqrt{(x'(t))^2 + (y'(t))^2 + (z'(t))^2} </me> 
    as <m>\Delta t \rightarrow 0</m> or <m>n\rightarrow \infty</m>. Thus the limit of the Riemann sum from <xref ref="def-arclength" >our definition of arc length</xref> gives a definite integral
    <md>
      <mrow> \lim_{n \rightarrow \infty} \sum_{i=1}^{n} \sqrt{(\Delta x_i)^2 + (\Delta y_i)^2 + (\Delta z_i)^2} =\amp \sum_{i=1}^{n} \sqrt{(\frac{\Delta x_i}{\Delta t})^2 + (\frac{\Delta y_i}{\Delta t})^2 + (\frac{\Delta z_i}{\Delta t})^2} \ \Delta t</mrow>
      <mrow> =\amp \int_a^b  \sqrt{(x'(t))^2 + (y'(t))^2 + (z'(t))^2} \ dt </mrow>
    </md>
    The following theorem summarizes how  our definition of arc length can be evaluated as a definite integral based on the 
  </p>
  <theorem xml:id="Length-of-a-curve">
    <title>The length of a curve</title>
  <p>
    If <m>\vr(t)</m> defines a smooth curve <m>C</m> on an interval <m>[a,b]</m>, then the <em>length</em><idx><h>arclength</h></idx> <m>L</m> of <m>C</m> is given by
    <men xml:id="eq_9_8_arclength_2">
      L = \int_a^b \Vert\vr'(t)\Vert \, dt.
    </men>
  </p>
</theorem>
<p>
  Note that formula <xref ref="eq_9_8_arclength_2"/> applies to curves in any dimensional space. Moreover, this formula has a natural interpretation: if <m>\vr(t)</m> records the position of a moving object, then <m>\vr'(t)=\vv(t)</m> is the object's velocity and <m>\Vert\vr'(t)\Vert</m> its speed. Formula <xref ref="eq_9_8_arclength_2"/> says that we simply integrate the speed of an object traveling over the curve to find the distance traveled by the object, which is the same as the length of the curve, just as in one-variable calculus.
</p>

<activity xml:id="A_9_8_1">
  <introduction>
    <p>
      In this activity, we will use parameterizations to find the length of a couple of common curves.
    </p>
  </introduction>
  <task>
    <statement>
      <p>
        Parameterize a circle of radius <m>R</m> centered at the origin and be sure to give bounds on your parameter.
      </p>
    </statement>
    <solution>
      <p>
        We can parameterize a circle of radius <m>R</m> centered at the origin by <m>\vr(t) = \langle R\cos(t), R\sin(t) \rangle</m> for <m>t</m> in the interval <m>[0, 2\pi]</m>.
      </p>
    </solution>
  </task>
  <task>
    <statement>
      <p>
        Use your parameterization from the previous task in the definite integral of <xref ref="Length-of-a-curve" /> to calculate the circumference of a circle of radius <m>R</m>.
      </p>
    </statement>
    <solution>
      <p>
        The circumference of this circle is the length of curve defined by <m>R</m>, or
        <me>
          \int_0^{2\pi} \Vert \vr'(t) \Vert \, dt = \int_0^{2\pi} \sqrt{(-R\sin(t))^2 + (R\cos(t))^2} \, dt = \int_0^{2\pi} R \, dt = 2 \pi R
        </me>
        as expected.
      </p>
    </solution>
  </task>
  <task>
    <statement>
      <p>
        Find the exact length of the spiral defined by <m>\vr(t) = \langle R\cos(t), R\sin(t), t \rangle</m> on the interval <m>[0,2\pi]</m>.
      </p>
    </statement>
    <solution>
      <p>
        The length of curve defined by <m>\vr</m> on the interval <m>[0,2 \pi]</m> is
        <me>
          \int_0^{2\pi} \lvert \vr'(t) \rvert \, dt = \int_0^{2\pi} \sqrt{(-R\sin(t))^2 + (R\cos(t))^2 + 1^2} \, dt = \int_0^{2\pi} R \sqrt{2} \, dt = 2 \pi \sqrt{2} R
        </me>
      </p>
    </solution>
  </task>
  <task>
    <statement>
      <p>
        Explain why your result for the length of the spiral is larger than the circumference of the circle of the same radius.
      </p>
    </statement>
  </task>
</activity>
<p>
  <xref ref="A_9_8_3" /> will apply <xref ref="def-arclength"/> and <xref ref="Length-of-a-curve" /> to get the length of a graph given by <m>y=f(x)</m>, which you may have seen in previous calculus courses.   
</p>
</subsection>
<subsection>
  <title>Traveling with Unit Speed</title>
  <p>
    In <xref ref="A_9_8_1" />, you looked at parameterizations of a circle and a helix that traveled with constant speed. This made the calculation of arc length in each case much easier and since there is not one parameterization for a curve, you may be wondering if it is possible to create a parameterization for each curve that moves with constant speed. The answer is YES but in practice this parameterization might be difficult to write out algebraically. 
  </p>
    
  <p>  
    Before we dig into the details of this constant speed parameterization, we will make our lives even easier by trying find a parameterization that describes traveling on our curve with unit speed; In other words, we want to find a parameterization of our curve, <m>\vr(t)</m>, that has speed one for all time, <m>\Vert \vr'(t) \Vert=1</m>. If you are always moving with speed one, then the distance traveled IS the time ellapsed. If you walk at exactly 1 meter per second for 47 seconds, how far have you gone? If you walk at exactly 1 meter per second, how long will it take you to travel 47 meters? The answer to both is 47 (the units are different...) Remember that we do not have to walk in a straight line (constant direction) to keep our speed constant.
  </p>
  <example>
    <p>
      In this example, we look a few simple paths and how to write a parameterization that moves with unit speed. For our first path, we will consider the linear path given by starting at the point <m>(x_0,y_0,z_0)</m> when <m>t=a</m> and going to the point <m>(x_1,y_1,z_1)</m> when <m>t=b</m>. This line will be described by the parameterization <m>\vr(t) = \langle x_0+\frac{t-a}{b-a}(x_1-x_0),y_0+\frac{t-a}{b-a}(y_1-y_0),z_0+\frac{t-a}{b-a}(z_1-z_0) \rangle </m>. This parameterization will have speed 
      <me>\Vert \vr'(t)\Vert = \sqrt{(\frac{x_1-x_0}{b-a})^2+(\frac{y_1-y_0}{b-a})^2+(\frac{z_1-z_0}{b-a})^2} </me>
      Note that the speed of this parameterization is constant, so for simplicity we will call this constant speed <m>v_{line}</m>.
    </p>
    <p>
      In order to change this parameterization to move with speed 1, we will need to travel <m>v_{line}</m> times slower, which can be accomplished by replacing <m>t</m> in our parameterization with <m>\frac{t}{v_{line}}</m>. In other words, we adjusted the parameter used to make sure the speed with respect to new parameter will be one. This adjustment was easy to do because the amount we needed to change the parameter did not change at different times.
    </p>
    <p>
      Algebraically, we can characterize this change by thinking of <m>\vr(u)</m> as the <q>old</q> parameterization with parameter <m>u</m> and we are looking to replace <m>u</m> with some function <m>\alpha(t)</m> so that <m>\Vert \vr'(t)\Vert=1</m> for all <m>t</m>. In our linear path case, our choice of <m>\alpha(t) = \frac{t}{v_{line}}</m> meant that applying the chain rule to <m>\Vert \vr'(t)\Vert</m> gives
      <me>\Vert \vr(\alpha(t)) \Vert= \left\Vert \frac{d\vr}{du}\right\Vert \left\vert\frac{d\alpha}{dt}\right\vert=v_{line} \frac{1}{v_{line}} =1</me>
    </p>
  </example>
  <p>
    The left part of the equation at the end of the previous example shows the big idea needed to find our unit speed parameterization; Specifically, we will need to pick our <m>\alpha(t)</m> transformation to satisfy 
    <me> \left\Vert \frac{d\vr}{du}\right\Vert \left\vert\frac{d\alpha}{dt}\right\vert =1</me>
    and this is algebraically <alert>VERY</alert> difficult to write out in closed form but will be possible because arclength traveled as a function of your parameter cannot decrease. If we graph the parameter versus arclength traveled, we get a graph that passes the horizontal line test and is thus invertible. An example of this kind of plot is shown in <xref ref="arclengthplot" />.
  </p>
  <figure xml:id="arclengthplot">
    <caption>A plot of the arclength traveled as a function of the parameter value to that point for <m>\vr(t)=\langle 3t\cos(4t)\sin(3-2t),t-\cos(2+t)\rangle</m></caption>
    <image width="80%" label="line-arclengthplot"> <!--source="/line_int_defn3"-->
      <description><p>An oriented curve from a point <m>P</m> to a point <m>Q</m></p></description>
      <sageplot>
        var('t,x')
        r2(t)=(3*t*cos(4*t)*sin(3-2*t),t-cos(2+t))
        speed(t)=norm(diff(r2,t))
        points=[]
        ps=0
        N=500
        for i in range(1,N):
          a=i/N*5
          ns=n(speed(a)*5/N+ps)
          points.append([a,ns])
          ps=ns
        plot4=scatter_plot(points,markersize=2,axes_labels=["$t$","Arclength"])
        plot4
      </sageplot>
    </image>
  </figure>
  <p>
    In the next example, we will work through the details of finding this transformation of a parameterization with variable speed into one that has unit speed.
  </p>
  <example>
    <p>
      In this example, we will consider the curve <m>C</m> parameterized by
        <me>
          \vr(t) = \left\langle t^2, \frac{8}{3}t^{3/2}, 4t \right\rangle
        </me>
        for <m>t \geq 0</m>. Our goal is to give a parameterization of <m>C</m> that has unit speed. Our first step is to find the speed of our parameterization, so 
        <md>
          <mrow>\Vert \vr'(t)\Vert \amp =  \sqrt{(x'(t))^2 + (y'(t))^2 +(z'(t))^2} </mrow>
          <mrow>\amp =  \sqrt{(2t)^2 + (4t^{1/2})^2 + (4)^2} </mrow>
          <mrow>\amp =  \sqrt{4t^2 + 16t + 16} </mrow>
          <mrow>\amp =  \sqrt{(2t+4)^2} </mrow>
          <mrow>\amp = 2t+4 </mrow>
        </md>
        An important element of this example is that our speed is not constant but still algebraically easy enough to work with for later calculations. Note that because we have stated that <m>t\gt 0</m> we only need to consider the positive branch of the square root calculation. 
    </p>
    <p>
      Next, we will calculate <m>s(x)</m>, the arclength traveled from <m>t=0</m> to <m>t=a</m> along the curve <m>C</m> in order to help us figure out how to transform our parameterization into one with unit speed. We can use <xref ref="Length-of-a-curve" /> to get the following for our arclength calculation:
      <md>
        <mrow>s(a) \amp = \int_{0}^a \sqrt{(x'(t))^2 + (y'(t))^2 +(z'(t))^2} \, dt</mrow>
        <mrow>\amp = 2\int_0^a t+2 \, dt</mrow>
        <mrow>\amp = \left(t^2+4t\right)\biggm|_{0}^{a}</mrow>
        <mrow>\amp = a^2+4a</mrow>
      </md>
      So the arclength traveled from <m>t=0</m> to <m>t=a</m> along the curve <m>C</m> is <m>a^2+4a</m>. It is important to remember at this point that we want to transform our parameterization to have unit speed, which will mean that the arclength and the parameter will be the same value as we move along the curve. This means that we want a function that takes an input of arclength along the curve <m>C</m> and outputs the time at which our original parameter reaches that location. In other words, we want the inverse function of <m>s(a)=a^2+4a</m> because <m>s(a)</m> gives the arclength that corresponds to the parameter value <m>a</m>. Since <m>t \geq 0</m>, we can solve the equation <m>s = a^2+4a</m> (or <m>a^2+4a-s=0</m>) for <m>a</m> to obtain <m>a = \frac{-4 +\sqrt{16+4s}}{2} = -2 + \sqrt{4+s}</m>. Note again that by restricting to positive parameter values, we only need to consider one branch of our solutions. 
    </p>
    <p>
       Let's slow down and make sure we understand our two functions and their composition. The original parameterization <m>\vr(t)</m> has inputs of parameter values and outputs corresponding to locations on our curve <m>C</m>. Our function <m>a(s)</m> has inputs that are arclengths (specifically, the arclength traveled from <m>t=0</m> to <m>t=a</m> along the curve <m>C</m>) and outputs corresponding to the parameter values (of the original parameterization).  
    </p>
    <p>
      We can now do a composition of our result of <m>a=-2+\sqrt{4+s}</m> with the original parameterization to get our unit speed parameterization; specifically, we claim that <m>\vr(a(s))</m> will be a unit speed parameterization. Remember that a unit speed parameterization of a curve is equivalent to idea that the <q>time elapsed = arclength traveled</q>, which is exactly <m>\vr(a(s))</m> because the parameter being used is the amount of arclength being traveled. The composition <m>\vr(a(s))</m> will have an input of arclength traveled as it's parameter and the <q>inner</q> function, <m>a(s)</m>, will output the parameter value (of the original parameterization) where that arclength is achieved. Thus <m>\vr(a(s))</m> will output the location on <m>C</m> where an arclength of <m>s</m> will be achieved. 
    </p>
    <p>
      You may be a bit overwhelmed by the previous paragraphs conceptually, so let's go back to the algebra of our problem. For our example, the composition <m>\vr(a(s))</m> will give the following as the unit speed parameterization. 
      <me>\vr_{new}(s)=\left\langle \left(-2 + \sqrt{4+s}\right)^2, \frac{8}{3}\left(-2 + \sqrt{4+s}\right)^{3/2}, 4\left(-2 + \sqrt{4+s}\right) \right\rangle</me>
      If we are diligent and persistent with our calculations, we can show that <m>\Vert \vr_{new}' \Vert=1</m>.
      <md>
        <mrow> \Vert \vr_{new}' \Vert =\amp \Vert \left\langle 2(-2+\sqrt{4+s})\frac{1/2}{\sqrt{4+s}} \right.</mrow>
        <mrow>  \amp \quad \quad \left. , \frac{8}{3}\left(\frac{3}{2}\left(-2+\sqrt{4+s}\right)^{1/2}\left(\frac{1/2}{\sqrt{4+s}}\right)\right) ,  4 \frac{1/2}{\sqrt{4+s}} \right\rangle</mrow>
        <mrow> =\amp \left\Vert \frac{1}{\sqrt{4+s}} \left\langle -2+\sqrt{4+s},2\sqrt{-2+\sqrt{4+s}},2 \right\rangle \right\Vert</mrow>
        <mrow> =\amp \sqrt{\frac{1}{\sqrt{4+s}}\left( \left(-2+\sqrt{4+s}\right)^2+\left(2\sqrt{-2+\sqrt{4+s}}\right)^2+(2)^2 \right)} </mrow>
        <mrow> =\amp \sqrt{\frac{1}{\sqrt{4+s}}\left( (-2+\sqrt{4+s})+2\right)^2} </mrow>
        <mrow> =\amp \sqrt{\frac{4+s}{4+s}} = 1</mrow>
      </md>
    </p>
    <p>
      The crucial step in our work (algebraically and conceptually) was the inverse function of <m>s(a)</m> which was relatively simple for this example. In general, this can be very difficult to write out explicitly.
    </p>
  </example>
  <p>
    The example above shows how to convert a parameterization to one that has unit speed. Key to this was understanding that distance along the curve is not the same as the parameter being used (in general). If we consider the curve defined by the parabola <m>y = x^2/2</m> with <m>x\in[0,2]</m>, then we can parameterize this curve by <m>\vr(t) = \langle t, t^2/2\rangle</m> for <m>t\in[0,2]</m>. We can plot equally spaced points in our parameter and equally spaced points in arclength to see th
  </p>
  <figure xml:id="F_9_8_parametrization">
    <caption>A plot of <m>y = x^2/2</m> with <m>x\in[0,2]</m> with points equally spaced in the parameter value (on left) and in arclength (on right)</caption>
    <image width="100%" source="images/fig_9_8_param"/>
  </figure>
  <p>
    In many ways, a parameterization with unit speed is a more natural parametrization. Consider an interstate highway cutting across a state. One way to parametrize the curve defined by the highway is to drive along the highway and record our position at every time, thus creating a function <m>\vr</m>. If we encounter an accident or road construction, however, this parametrization might not be at all relevant to another person driving the same highway. A parameterization using unit speed is like using the mile markers on the side of road to specify our position on the highway. If we know how far we've traveled along the highway, we know exactly where we are. Another way to think about this is that by driving at exactly one mile per hour, we can put mile markers down every hour.
    </p>
    <p>
      These examples illustrate a general method. Of course, evaluating an arc length integral and finding a formula for the inverse of a function can be difficult, so while this process is theoretically possible, it is not always practical to parameterize a curve in terms of arc length. However, we can guarantee that such a parameterization exists, and this observation plays an important role in the next section.
    </p>
  </subsection>
  <subsection xml:id="driverroad">
    <title>The Driver or The Road?</title>
    <p>
      In the next activity, we will look at several measurements as we consider different drivers completing one lap around the track seen in <xref ref="racetrack_plot">Figure</xref>.
    </p>
    <figure xml:id="racetrack_plot">
      <caption>A plot of the racetrack with scale in meters</caption>
      <sidebyside>
        <image width="45%" source="images/racetrack1.png"/>
        <image width="45%" source="images/racetrack2.png"/>
      </sidebyside>
    </figure>
      <p>
        All of the drivers are going the same way around the track, all start at the same location at <m>t=0</m>, all complete one lap of the track, and all of the cars have perfect grip of the road (the race cars are never sliding). The picture of the racetrack above is given so you have an example to help you think about the tasks in this problem, not because any particular feature of the track needs to be considered for the following activity.
      </p>
    <activity xml:id="driver_road_act">
      <title>Is it a property of the driver or the road?</title>
      <introduction>
        <p>
          In this activity, we want to determine if the different measurements that are described are a property of the driver or the road. A measurement is a property of the driver if the value(s) of that measurement <alert>can</alert> be different for different drivers (when measured at the same location on the racetrack). A measurement is a property of the road when different drivers <alert>must</alert> have the same value(s) (when measured at the same location on the racetrack).
        </p>
      </introduction>
      <task>
        <statement>
          <p>
            Let's start by looking at a couple of easy measurements. Is the time elapsed a property of the driver or the road? Be sure to explain your answer.
          </p>
        </statement>
        <hint>
          <p>Remember that we are NOT asking if the driver or road can control time. We are asking if the elapsed time is the same for all drivers at a fixed point on the racetrack or if drivers can have a different elapsed time to a particular location on the racetrack.</p>
        </hint>
      </task>
      <task>
        <statement>
          <p>
            Is position (the location of the car on the racetrack) a property of the driver or the road? Be sure to explain your answer.
          </p>
        </statement>
        <hint>
          <p>
            You should make sure you understand that the measurements for different drivers must be made at the same location on the track, as stated above. Your explanation sentence may sound a little silly.
          </p>
        </hint>
      </task>
      <task>
        <statement>
        <p>
          Now that we are warmed up, let's look at some more interesting measurements.
        </p>
        <p>
          <em>Speedometer Reading</em>: The car's speedometer reading measures how fast (as a scalar) the car is moving. Is the car's speedometer reading a property of the driver or the road? Be sure to explain your answer.
        </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            What vector calculus quantity is the speedometer reading?
          </p>
        </statement>
        <hint>
          The vector calculus quantities we have covered are time, position, velocity, acceleration, speed, arc length, unit tangent, unit normal, binormal, curvature, tangential acceleration component, normal acceleration component, and osculating circle.
        </hint>
        <hint>
          This is an easy one, I hope.
        </hint>
      </task>
      <task>
        <statement>
          <p>
            <em>Odometer Reading</em>: The racecar's odometer measures the distance traveled by the car. Every car's odometer is set to be zero at the start of the race. Is the car's odometer reading a property of the driver or the road? Be sure to explain your answer.
          </p>
        </statement>
      </task>
    </activity>
  </subsection>


  <subsection>
    <title>Summary</title>
    <ul>
      <li>
        <p>
          The integration process shows that the length <m>L</m> of a smooth curve defined by <m>\vr(t)</m> on an interval <m>[a,b]</m> is
          <me>
            L = \int_a^b |\vr'(t)| \, dt.
          </me>
        </p>
      </li>

      <li>
        <p>
          A parameterization with unit speed is useful because when we move with unit speed our parameter is the same as the arclength traveled to that point.
        </p>
      </li>
    </ul>

    </subsection>
    <xi:include href="exercises/ez-S_VVF_Arclength.ptx" />

    
</section>
